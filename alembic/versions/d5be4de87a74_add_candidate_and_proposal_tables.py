"""add candidate and proposal tables

Revision ID: d5be4de87a74
Revises: fbc5e0733f00
Create Date: 2025-06-24 04:47:07.008405

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "d5be4de87a74"
down_revision: Union[str, None] = "fbc5e0733f00"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("users")
    op.drop_table("transactions")
    op.drop_table("posts")
    op.drop_table("referendum_votes")
    op.drop_table("referendums")
    op.drop_table("bank_accounts")
    op.drop_table("npcs")
    op.drop_table("votes")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "votes",
        sa.Column("id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("voted_party_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "timestamp",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("votes_pkey")),
    )
    op.create_table(
        "npcs",
        sa.Column("id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("party", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("picture", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("npcs_pkey")),
    )
    op.create_table(
        "bank_accounts",
        sa.Column("id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("owner_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "owner_type",
            postgresql.ENUM("user", "party", "group", "admin", name="ownertype"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("account_number", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("balance", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="bank_accounts_pkey"),
        sa.UniqueConstraint(
            "account_number",
            name="bank_accounts_account_number_key",
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "referendums",
        sa.Column("id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("title", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("active", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("referendums_pkey")),
    )
    op.create_table(
        "referendum_votes",
        sa.Column("id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("referendum_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("vote", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "timestamp",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("referendum_votes_pkey")),
    )
    op.create_table(
        "posts",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("title", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("category", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("content", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("created_by", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "likes",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "replies",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["users.id"], name=op.f("posts_created_by_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("posts_pkey")),
    )
    op.create_table(
        "transactions",
        sa.Column("id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("from_account_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("to_account_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("amount", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("note", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "transaction_type",
            postgresql.ENUM(
                "post_cost",
                "transfer",
                "distribute",
                "post_penalty",
                "initial_grant",
                "system_adjustment",
                name="transactiontype",
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["from_account_id"],
            ["bank_accounts.id"],
            name=op.f("transactions_from_account_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["to_account_id"],
            ["bank_accounts.id"],
            name=op.f("transactions_to_account_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("transactions_pkey")),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("username", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("fullname", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("hashed_password", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("role", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("coins", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("affiliation_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "affiliation_type",
            postgresql.ENUM("user", "party", "group", "admin", name="ownertype"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("users_pkey")),
        sa.UniqueConstraint(
            "username",
            name=op.f("users_username_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    # ### end Alembic commands ###
